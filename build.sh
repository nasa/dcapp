#!/bin/bash

# Auto Generated by:
# "pl_build.py" version: 1.1.1

# Project: dcapp

# ################################################################################
# #                              Development Setup                               #
# ################################################################################

# colors
BOLD=$'\e[0;1m'
RED=$'\e[0;31m'
RED_BG=$'\e[0;41m'
GREEN=$'\e[0;32m'
GREEN_BG=$'\e[0;42m'
CYAN=$'\e[0;36m'
MAGENTA=$'\e[0;35m'
YELLOW=$'\e[0;33m'
WHITE=$'\e[0;97m'
NC=$'\e[0m'

# find directory of this script
SOURCE=${BASH_SOURCE[0]}
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )

# make script directory CWD
pushd $DIR >/dev/null

# default configuration
PL_CONFIG=debug

# check command line args for configuration
while getopts ":c:" option; do
   case $option in
   c) # set conf
         PL_CONFIG=$OPTARG;;
     \?) # Invalid option
         echo "Error: Invalid option"
         exit;;
   esac
done

# ################################################################################
# #                            configuration | debug                             #
# ################################################################################

if [[ "$PL_CONFIG" == "debug" ]]; then

# create output directory(s)
mkdir -p "pilotlight/out"

# create lock file(s)
echo LOCKING > "pilotlight/out/lock.tmp"

# check if this is a reload
PL_HOT_RELOAD_STATUS=0

# # let user know if hot reloading
if pidof -x "pilot_light" -o $$ >/dev/null;then
    PL_HOT_RELOAD_STATUS=1
    echo
    echo ${BOLD}${WHITE}${RED_BG}--------${GREEN_BG} HOT RELOADING ${RED_BG}--------${NC}
    echo
else
    # cleanup binaries if not hot reloading
    PL_HOT_RELOAD_STATUS=0
    rm -f pilotlight/out/dcapp.so
    rm -f pilotlight/out/dcapp_*.so


fi
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ dcapp | debug ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

PL_RESULT=${BOLD}${GREEN}Successful.${NC}
PL_DEFINES="-D_DEBUG -DPL_CONFIG_DEBUG "
PL_INCLUDE_DIRECTORIES="-Iapps -Isrc -Ipilotlight/src -Ipilotlight/libs -Ipilotlight/extensions -Ipilotlight/dependencies/stb -I/usr/include/gdal -I/usr/include/libxml2 "
PL_LINK_DIRECTORIES="-Lpilotlight/out -Wl,-rpath,pilotlight/out -L/usr/lib/x86_64-linux-gnu -Wl,-rpath,/usr/lib/x86_64-linux-gnu "
PL_COMPILER_FLAGS="-std=c++17 -fPIC --debug -g -O0 "
PL_LINKER_FLAGS="-lstdc++ -lstdc++fs -lxml2 -lSDL2 -lpthread -lgdal -ldl -lz -ldl -lm "
PL_STATIC_LINK_LIBRARIES=""
PL_DYNAMIC_LINK_LIBRARIES=""
PL_SOURCES="src/value.cpp src/dcapp-data.cpp src/utils/file-utils.cpp src/utils/string-utils.cpp src/utils/xml-utils.cpp src/utils/math-utils.cpp apps/dcapp.cpp "

# run compiler (and linker)
echo
echo ${YELLOW}Step: dcapp${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -shared $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_STATIC_LINK_LIBRARIES $PL_DYNAMIC_LINK_LIBRARIES $PL_LINKER_FLAGS -o "./pilotlight/out/dcapp.so"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# delete lock file(s)
rm -f pilotlight/out/lock.tmp

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# end of debug
fi

# ################################################################################
# #                           configuration | release                            #
# ################################################################################

if [[ "$PL_CONFIG" == "release" ]]; then

# create output directory(s)
mkdir -p "pilotlight/out"

# create lock file(s)
echo LOCKING > "pilotlight/out/lock.tmp"

# check if this is a reload
PL_HOT_RELOAD_STATUS=0

# # let user know if hot reloading
if pidof -x "pilot_light" -o $$ >/dev/null;then
    PL_HOT_RELOAD_STATUS=1
    echo
    echo ${BOLD}${WHITE}${RED_BG}--------${GREEN_BG} HOT RELOADING ${RED_BG}--------${NC}
    echo
else
    # cleanup binaries if not hot reloading
    PL_HOT_RELOAD_STATUS=0
    rm -f pilotlight/out/dcapp.so
    rm -f pilotlight/out/dcapp_*.so


fi
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ dcapp | release ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

PL_RESULT=${BOLD}${GREEN}Successful.${NC}
PL_DEFINES="-DNDEBUG -DPL_CONFIG_RELEASE "
PL_INCLUDE_DIRECTORIES="-Iapps -Isrc -Ipilotlight/src -Ipilotlight/libs -Ipilotlight/extensions -Ipilotlight/dependencies/stb -I/usr/include/gdal -I/usr/include/libxml2 "
PL_LINK_DIRECTORIES="-Lpilotlight/out -Wl,-rpath,pilotlight/out -L/usr/lib/x86_64-linux-gnu -Wl,-rpath,/usr/lib/x86_64-linux-gnu "
PL_COMPILER_FLAGS="-std=c++17 -fPIC -O2 "
PL_LINKER_FLAGS="-lstdc++ -lstdc++fs -lxml2 -lSDL2 -lpthread -lgdal -ldl -lz -ldl -lm "
PL_STATIC_LINK_LIBRARIES=""
PL_DYNAMIC_LINK_LIBRARIES=""
PL_SOURCES="src/value.cpp src/dcapp-data.cpp src/utils/file-utils.cpp src/utils/string-utils.cpp src/utils/xml-utils.cpp src/utils/math-utils.cpp apps/dcapp.cpp "

# run compiler (and linker)
echo
echo ${YELLOW}Step: dcapp${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -shared $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_STATIC_LINK_LIBRARIES $PL_DYNAMIC_LINK_LIBRARIES $PL_LINKER_FLAGS -o "./pilotlight/out/dcapp.so"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# delete lock file(s)
rm -f pilotlight/out/lock.tmp

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# end of release
fi


# return CWD to previous CWD
popd >/dev/null
